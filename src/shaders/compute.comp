#version 450
#extension GL_ARB_separate_shader_objects : enable

#define APPLY_PHYSICS 1
#define ORIENTATION_TEST 1
#define FRUSTRUM_TEST 1
#define DISTANCE_TEST 1

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

layout(set = 2, binding = 0) buffer Blades {
    Blade blades[];
} blades;

layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledBlades[];
} culledBlades;

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
layout(set = 2, binding = 2) buffer NumBlades {
	  uint vertexCount;   // Write the number of blades remaining here
	  uint instanceCount; // = 1
	  uint firstVertex;   // = 0
	  uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}



vec2 random2(vec2 p) {
    return fract(sin(vec2(dot(p, vec2(127.1f, 311.7f)), dot(p, vec2(269.5f,183.3f)))) * 43758.5453f);
}

float surflet(vec2 p, vec2 gridPoint) {
    // Compute the distance between p and the grid point along each axis, and warp it with a
    // quintic function so we can smooth our cells
    vec2 t2 = abs(p - gridPoint);
    // vec2 t = vec2(1.f) - 6.f * pow(t2, vec2(5.f)) + 15.f * pow(t2, vec2(4.f)) - 10.f * pow(t2, vec2(3.f));
    vec2 t;
    t.x = 1.0f - 6.0f*t2.x*t2.x*t2.x*t2.x*t2.x + 15.0f*t2.x*t2.x*t2.x*t2.x - 10.0f*t2.x*t2.x*t2.x;
    t.y = 1.0f - 6.0f*t2.y*t2.y*t2.y*t2.y*t2.y + 15.0f*t2.y*t2.y*t2.y*t2.y - 10.0f*t2.y*t2.y*t2.y;
    // Get the random vector for the grid point (assume we wrote a function random2
    // that returns a vec2 in the range [0, 1])
    vec2 gradient = random2(gridPoint) * 2.f - vec2(1.f,1.f);
    // Get the vector from the grid point to P
    vec2 diff = p - gridPoint;
    // Get the value of our height field by dotting grid->P with our gradient
    float height = dot(diff, gradient);
    // Scale our height field (i.e. reduce it) by our polynomial falloff function
    return height * t.x * t.y;
}

float perlin2D(vec2 uv) {
    float surfletSum = 0.f;
    // Iterate over the four integer corners surrounding uv
    for(int dx = 0; dx <= 1; ++dx) {
        for(int dy = 0; dy <= 1; ++dy) {
            surfletSum += surflet(uv, floor(uv) + vec2(dx, dy));
        }
    }
    return surfletSum;
}


vec3 windFunction(vec3 pos, float time) {
    vec2 uv = pos.xz;

    vec3 windDir = vec3(perlin2D(uv * 5.f + time * 0.5f),
                        0.f,
                        perlin2D(uv * 5.f + 100.f + time * 0.5f));

    return windDir;
}


bool inFrustrum(vec3 point) {
    float tolerance = 0.1f;
    vec4 projectedPoint = camera.proj * camera.view * vec4(point, 1.f);
    float h = projectedPoint.w + tolerance;
    bool isInFrustrum = inBounds(projectedPoint.x, h) && inBounds(projectedPoint.y, h) && inBounds(projectedPoint.z, h);
    return isInFrustrum;
}


void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    Blade blade = blades.blades[gl_GlobalInvocationID.x];

    vec3 v0 = blade.v0.xyz;
    vec3 v1 = blade.v1.xyz;
    vec3 v2 = blade.v2.xyz;
    vec3 up = blade.up.xyz;

    float orientation = blade.v0.w;
    float height = blade.v1.w;
    float width = blade.v2.w;
    float stiffness = blade.up.w;

    // TODO: Apply forces on every blade and update the vertices in the buffer

#if APPLY_PHYSICS
    // recovery
    vec3 initialV2 = v0 + up * height;
    vec3 recoveryForce = stiffness * (initialV2 - v2);

    // gravity
    vec3 right = vec3(cos(orientation), 0.0, sin(orientation));
    vec3 front = cross(up, right);
    
    vec3 ge = vec3(0.f, -9.81f, 0.f);
    vec3 gf = 0.25 * length(ge) * front;
    vec3 gravity = ge + gf;

    // wind
    vec3 wind = windFunction(v0, totalTime);
    float fd = 1 - abs(dot(normalize(wind), normalize(v2 - v0)));
    float fr = dot(v2 - v0, up) / height;
    float strength = 5.f;
    vec3 windForce = wind * fd * fr * strength;;


    vec3 totalForce = recoveryForce + gravity + windForce;

    v2 = v2 + deltaTime * totalForce;

    // State Validation
    v2 = v2 - up * min(dot(up, v2 - v0), 0.f);

    float lProj = length(v2 - v0 - up*dot(v2 - v0, up));
    v1 = v0 + height * up  *max(1.f - lProj / height, 0.05f * max(lProj / height, 1.f));

    float L0 = distance(v0, v2);
    float L1 = distance(v1, v0) + distance(v1, v2);
    float n = 2.f;
    float L = (2.f * L0 + (n - 1.f) * L1) / (n + 1.f);
    float r = height / L;
    vec3 v1Corr = v0 + r * (v1 - v0);
    vec3 v2Corr = v1Corr + r * (v2 - v1);
#endif

#if !APPLY_PHYSICS
    vec3 v1Corr = v1;
    vec3 v2Corr = v2;
#endif

    blade.v1.xyz = v1Corr;
    blade.v2.xyz = v2Corr;
    blades.blades[gl_GlobalInvocationID.x] = blade;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    vec3 camPos = vec3(inverse(camera.view) * vec4(0.f, 0.f, 0.f, 1.f));
#if ORIENTATION_TEST
    // orientation test
    vec3 viewDir = normalize(camPos - v0);
    vec3 bladeDir = vec3(cos(orientation), 0.f, sin(orientation));
    if (abs(dot(viewDir, bladeDir)) > 0.3f) return;
#endif

#if FRUSTRUM_TEST
    // view frustum test
    // center point
    vec3 m = 0.25f * v0 + 0.5f * v1 + 0.25f * v2;
    if ( !(inFrustrum(v0) || inFrustrum(m) || inFrustrum(v2)) ) return;
#endif

#if DISTANCE_TEST
    // distance test
    float dProj = length(v0 - camPos - up * dot(v0 - camPos, up));
    float distMax = 15.f;
    int distLevel = 10;
    if (gl_GlobalInvocationID.x % distLevel < int(floor(distLevel * (1.f - dProj / distMax)))) return;
#endif

    culledBlades.culledBlades[atomicAdd(numBlades.vertexCount, 1)] = blade;
}
