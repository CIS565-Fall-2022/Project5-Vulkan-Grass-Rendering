#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

layout(set = 2, binding = 0) buffer NumBlades {
    uint vertexCount;
    uint instanceCount;
    uint firstVertex;
    uint firstInstance;
} numBlades;

layout(set = 2, binding = 1) buffer BladeData {
    Blade bladeData[];
};

layout(set = 2, binding = 2) buffer CulledBladeData {
    Blade culledBladeData[];
};

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
        numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    atomicAdd(numBlades.vertexCount, 1);
    culledBladeData[gl_GlobalInvocationID.x] = bladeData[gl_GlobalInvocationID.x];
}
