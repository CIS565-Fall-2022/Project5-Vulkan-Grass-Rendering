#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define ORIENTATION_CULLING 1
#define VIEW_FRUSTRUM_CULLING 1
#define DISTANCE_CULLING 1
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
  mat4 view;
  mat4 proj;
}
camera;

layout(set = 1, binding = 0) uniform Time {
  float deltaTime;
  float totalTime;
};

struct Blade {
  vec4 v0;  // v0.w -- orientation
  vec4 v1;  // v1.w -- height
  vec4 v2;  // v2.w -- width
  vec4 up;  // up.w -- stiffness
};

// Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

layout(set = 2, binding = 0) buffer Blades { 
    Blade blades[]; 
};

layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledBladesBuffer[]; 
};

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a
// draw call This is sort of an advanced feature so we've showed you what this
// buffer should look like

layout(set = 2, binding = 2) buffer NumBlades {
    uint vertexCount;    // Write the number of blades remaining here
    uint instanceCount;  // = 1
    uint firstVertex;    // = 0
    uint firstInstance;  // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

// 	<www.shadertoy.com/view/XsX3zB>
//	by Nikita Miropolskiy

/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */
vec3 random3(vec3 c) {
    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
    vec3 r;
    r.z = fract(512.0*j);
    j *= .125;
    r.x = fract(512.0*j);
    j *= .125;
    r.y = fract(512.0*j);
    return r-0.5;
}

void main() {
    // Reset the number of blades to 0
    if (gl_GlobalInvocationID.x == 0) {
        numBlades.vertexCount = 0;
    }
    barrier();  // Wait till all threads reach this point

    Blade blade = blades[gl_GlobalInvocationID.x];
    vec3 v0 = blade.v0.xyz;
    vec3 v1 = blade.v1.xyz;
    vec3 v2 = blade.v2.xyz;
    vec3 up = blade.up.xyz;

    float theta = blade.v0.w;
    float h = blade.v1.w;
    float width = blade.v2.w;
    // stiffness
    float s = blade.up.w; 

    vec3 bitangent = vec3(-cos(theta), 0.0, sin(theta));
    vec3 f = cross(bitangent, up);
    //gravity
    vec3 D = vec3(0.0, -1.0, 0.0);
    vec3 gE = normalize(D.xyz) * 9.8;  
    vec3 gF = 0.25 * length(gE) * f; 
    vec3 g = gE + gF;

    // recovery force
    vec3 iV2 = v0 + h * up;  
    vec3 re = (iV2 - v2) * s;

    // wind
    vec3 windDirection = random3(v0) * cos(sin(totalTime)) * 5;

    float fd = 1 - abs(dot(normalize(windDirection), normalize(v2 - v0)));
    float fr = dot(v2 - v0, up) / h;
    vec3 w = windDirection * fd * fr;

    // total force
    vec3 tv2 =  (g + re + w) * deltaTime;

    v2 += tv2;

    // state validation
    // must be above the ground
    v2 = v2 - up * min(dot(up, v2 - v0), 0.0);
    // curvature
    float lProj = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + h * up * max(1 - lProj / h, 0.05 * max(lProj / h, 1));

    //Bezier curve length correction
    float L0 = length(v2 - v0);
    float L1 = length(v2 - v1) + length(v1 - v0);
    // degree of Bezier curve
    float n = 2.0;
    float L = (2 * L0 + (n - 1) * L1) / (n + 1);
    float r = h / L;
    vec3 v1Corr = v0 + r * (v1 - v0);
    vec3 v2Corr = v1Corr + r * (v2 - v1);

    v1 = v1Corr;
    v2 = v2Corr;

    // Update blade buffer
    blades[gl_GlobalInvocationID.x].v1.xyz = v1;
    blades[gl_GlobalInvocationID.x].v2.xyz = v2;

  // Cull blades that are too far away or not in the camera frustum
  // and write them to the culled blades buffer Note: to do this, you will
  // need to use an atomic operation to read and update
  // numBlades.vertexCount You want to write the visible blades to the
  // buffer without write conflicts between threads

  // 1. Orientation test
  // P_eye = view^-1 fourth row
    vec3 eye = vec3(inverse(camera.view) * vec4(0,0,0,1));
#if ORIENTATION_CULLING
  //camera pos
  
    vec3 viewDir = v0 - eye;
    vec3 bladeDir = bitangent;
    if(abs(dot(normalize(viewDir), normalize(bitangent))) > 0.3) return;

#endif

#if VIEW_FRUSTRUM_CULLING
  //2. View-frustrum test
    vec3 m = 0.25f * v0  +  0.5f * v1  + 0.25f * v2;
    mat4 viewProjection = camera.proj * camera.view;
    vec4 v0_ndc = viewProjection * vec4(v0, 1.f);
    vec4 m_ndc = viewProjection * vec4(m, 1.f);
    vec4 v2_ndc = viewProjection * vec4(v2, 1.f); 

    float t = 0.001f;
    float h0 = v0_ndc.w + t;
    float hm = m_ndc.w + t;
    float h2 = v2_ndc.w + t;

    bool v_v0 = inBounds(v0_ndc.x, h0) && inBounds(v0_ndc.y, h0) && inBounds(v0_ndc.z, h0);
    bool v_m = inBounds(m_ndc.x, hm) && inBounds(m_ndc.y, hm) && inBounds(m_ndc.z, hm);
    bool v_v2 = inBounds(v2_ndc.x, h2) && inBounds(v2_ndc.y, h2) && inBounds(v2_ndc.z, h2);

    if(!v_v0 && !v_m && !v_v2) return;
#endif

#if DISTANCE_CULLING
    float dProj = length(v0 - eye - up * dot(v0 - eye, up));
    if(mod(gl_GlobalInvocationID.x, 10) >= (10 * (1 - dProj / 15))) {
        return;
    }
#endif
    uint idx = atomicAdd(numBlades.vertexCount, 1);
    culledBladesBuffer[idx] = blades[gl_GlobalInvocationID.x];
}