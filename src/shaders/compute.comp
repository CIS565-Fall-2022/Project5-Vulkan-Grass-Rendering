#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define GRAVITY_CONSTANT 9.8
#define WIND_MAGNITUDE 7.0

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

layout(set = 2, binding = 0) buffer Blades {
	  Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
	  Blade culledBlades[];
};

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
layout(set = 2, binding = 2) buffer NumBlades {
	  uint vertexCount;   // Write the number of blades remaining here
	  uint instanceCount; // = 1
	  uint firstVertex;   // = 0
	  uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
	Blade blade = blades[index];
	vec3 up = blade.up.xyz;
    vec3 v0 = blade.v0.xyz;
    vec3 v1 = blade.v1.xyz;
    vec3 v2 = blade.v2.xyz;
    float h = blade.v1.w;
    float stiffness = blade.up.w;
    float orientation = blade.v0.w;

	/*
	Calculating gravitational force
	*/

	vec4 D = vec4(0.0f, -1.0f, 0.0f, GRAVITY_CONSTANT);
	vec3 gravity_environmental = glm::normalize(D.xyz) * D.w;

	vec3 f;	// f represents the front direction that is perpendicular to the width of the blade
	
	vec3 t0 = normalize(v2 - v0); // tangent
    vec3 t1 = (-1.f, 0.f, 0.f);		// bitangent initialized, to be rotated by blade orientation about up vector
    t1 = cos(theta)*t1 + sin(theta)*cross(up, t1) + (1.0 - cos(theta))*dot(up, t1)*up;		// ??? check the rotation formula again
	f = normalize(cross(t0, t1));

	vec3 gravity_front = 0.25 * length(gravity_environmental) * f;

	vec3 gravity_force = gravity_environmental + gravity_front;


	/*
	 Calculating recovery force
	*/

	vec3 Iv2 = v0 + h * up;	// initial v2 position
	vec3 recovery_force = (Iv2 - v2) * stiffness;	// up.w hold stiffness coefficient


	/*
	 Calculating wind force
	*/
	
	vec3 windVector = WIND_MAGNITUDE * sin(v0.x * v0.z * totalTime);
	float fd = 1.f - length(dot(normalize(windVector), normalize(v2-v0)));
	float fr = dot((v2 - v0), up) / h;
	float alignmentValue = fd * fr;
	vec3 wind_force = windVector * alignmentValue;


	/*
	 Applying natural forces to grass blade
	*/

	// v2 must not be pushed beneath the ground
	v2 = v2 - up * min(dot(up, (v2 - v0)), 0);
	
	// v1 has to be set according to v2, v1 must be above v0
	float lproj = length(v2 - v0 - up * dot((v2 - v0), up));	// lproj is projected length, if this is 0 v2 rests in idle position, else v2 is away and v1 gets lower
	v1 = v0 + h * up * max( 1 - lproj / h , 0.05 * max( lproj / h, 1));

	// length of curve must be equal to height of blade of grass
	float L0 = distance(v0, v2);
	float L1 = distance(v0, v1) + distance(v1, v2);
	float L = 0.25 * ((2 * L0) + (2 * L1));
	float ratio = h/L;	// we will correct and readjust v1 and v2 acc to this ratio
	v1 = v0 + ratio * (v1 - v0);
	v2 = v1 + ratio * (v2 - v1);


	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
}
