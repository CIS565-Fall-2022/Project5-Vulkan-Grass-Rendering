#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define ORIENTATION_CULLING 0
#define VIEW_FRUSTUM_CULLING 1
#define DISTANCE_CULLING 1

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like

layout(set = 2, binding = 0) buffer Blades {
	Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
	  uint vertexCount;   // Write the number of blades remaining here
	  uint instanceCount; // = 1
	  uint firstVertex;   // = 0
	  uint firstInstance; // = 0
} numBlades;


bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool isWithinFrustum(vec3 p, mat4 vp) {
    vec4 pWorld = vp * vec4(p, 1.0);
    float tolerance = 0.1;
    float h = pWorld.w + tolerance;
    if (inBounds(pWorld.x, h) && inBounds(pWorld.y, h) && inBounds(pWorld.z, h)) {
        return true;
    }
    else {
        return false;
    }
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
    Blade curBlade = blades[gl_GlobalInvocationID.x];
    vec3 v0 = curBlade.v0.xyz;
    vec3 v1 = curBlade.v1.xyz;
    vec3 v2 = curBlade.v2.xyz;
    vec3 up = curBlade.up.xyz;
    float orientation = curBlade.v0.w;
    float height = curBlade.v1.w;
    float width = curBlade.v2.w;
    float stiffness = curBlade.up.w;

    // gravity
    // D.xyz is the gravity direction and D.w is the acceleration
    vec4 D = vec4(0, -1, 0, 9.8);
    vec3 t1 = normalize(vec3(cos(orientation), 0.0, sin(orientation)));
    // compute environment gravity
    vec3 gE = normalize(D.xyz) * D.w;
    // front facing direction of the blade
    vec3 f = normalize(cross(t1, up));
    // compute front gravity
    vec3 gf = 0.25 * length(gE) * f;
    vec3 gravity = gE + gf;

    // apply recovery
    vec3 iv2 = v0 + up * height;
    vec3 recovery = (iv2 - v2) * stiffness;

    // apply wind
    vec3 wind = vec3(1.0, -1.0, 1.0) * sin(totalTime) * 5.0;
    float fd = 1 - abs(dot(normalize(wind), normalize(v2 - v0)));
    float fr = dot(v2 - v0, up) / height;
    vec3 w = wind * fd * fr;

    // update control points
    vec3 tv2 = (gravity + recovery + wind) * deltaTime;

    // update v2
    v2 += tv2;

    // state validation
    v2 = v2 - up * min(up * (v2 - v0), 0);
    float lproj = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + height * up * max(1 - lproj/height, 0.05 * max(lproj/height, 1));
    float L0 = length(v2 - v0);
    float L1 = length(v2 - v1) + length(v1 - v0);
    float n = 2.0;
    float L = (2 * L0 + (n - 1) * L1) / (n + 1);
    float r = height / L;
    vec3 v1Corr = v0 + r * (v1 -v0);
    vec3 v2Corr = v1Corr + r * (v2 - v1);
    v1 = v1Corr;
    v2 = v2Corr;

    curBlade.v1.xyz = v1;
    curBlade.v2.xyz = v2;
    blades[gl_GlobalInvocationID.x] = curBlade;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

#if ORIENTATION_CULLING
    // camera forward direction
    vec3 dirC = normalize(vec3(camera.view[0][2], camera.view[1][2], camera.view[2][2]));
    vec3 dirB = t1;
    if (abs(dot(dirC, dirB)) < 0.6) {
        return;
    }

#endif

#if VIEW_FRUSTUM_CULLING
    // midpoint
    vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
    // compute view_projection matrix
    mat4 vp = camera.proj * camera.view;
    if (!isWithinFrustum(v0, vp) || !isWithinFrustum(v2, vp) || !isWithinFrustum(m, vp)) {
        return;
    }

#endif

#if DISTANCE_CULLING
    // camera position
    vec3 camPos = inverse(camera.view)[3].xyz;
    float dproj = length(v0 - camPos - up * dot(v0 - camPos, up));
    // num of distance levels
    int levels = 10;
    // maximum distance
    float dMax = 20.0;

    if (gl_GlobalInvocationID.x % levels > levels * (1 - dproj / dMax)) {
        return;
    }
#endif

    culledBlades[atomicAdd(numBlades.vertexCount, 1)] = curBlade;
}
