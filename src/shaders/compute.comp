#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32

#define GRAVITY_ON 1
#define RECOVER_ON 1
#define WIND_ON 1

#define ORIE_CULL 0
#define DIST_CULL 0
#define VIEW_CULL 0

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
    vec3 pos;

} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
layout(set = 2, binding = 0) buffer InputBlades {
    Blade in_blades[];
} ;

// 2. Write out the culled blades
layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culled_blades[];
} ;
// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//

// 3. Write the total number of blades remaining
layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

// helper for frustum culling 
bool inFrustum(vec3 point)
{
    mat4 vp = camera.proj * camera.view;
    vec4 pp = vp * vec4(point, 1.0f);
    float tolerance = 0.2f;
    float h = pp.w + tolerance;
    return inBounds(pp.x, h) && inBounds(pp.y, h) && inBounds(pp.z, h);
}

#define dMax 25 // distance culling
#define GRAVITY vec4(0, -1, 0, 5)
#define windFunc (vec3(3.0, 3.0, 3.0) * sin(totalTime))



void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
    uint id = gl_GlobalInvocationID.x;
    Blade b = in_blades[id];
    vec3 v0 = b.v0.xyz;
    vec3 v1 = b.v1.xyz;
    vec3 v2 = b.v2.xyz;
    vec3 up = b.up.xyz;

    float direction = b.v0.w;
    float h = b.v1.w;
    float width = b.v2.w;
    float stiffness = b.up.w;
    vec3 orient = vec3(cos(direction), 0, sin(direction)); 

    // gravity
    #if GRAVITY_ON
        vec3 gE = normalize(GRAVITY.xyz) * GRAVITY.w;
        vec3 frontDir = length(gE) * normalize(cross(orient, up));
        vec3 gF = 0.25f * frontDir;
        vec3 gravity = gE + gF; // front gravity and environment gravity 
    #else
        vec3 gravity = vec3(0,0,0);
    #endif

    // recovery
    #if RECOVER_ON
        vec3 iv2 = v0 + up * h;
        vec3 recovery = (iv2 - v2) * stiffness;
    #else
        vec3 recovery = vec3(0,0,0);
    #endif

    // wind
    #if WIND_ON
        float windDirection = 1 - abs(dot(normalize(windFunc), normalize(v2 - v0)));
        float windAlign = dot((v2 - v0), up) / h;
        vec3 wind = windFunc * windDirection * windAlign;
    #else
        vec3 wind = vec3(0,0,0);
    #endif

    // add all forces together
    vec3 totalForce = gravity + recovery + wind;
    v2 = v2 + totalForce * deltaTime; 

    // state update
    v2 = v2 - up * min(dot(up, v2 - v0), 0); 
    float Lproj = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + h * up * max(1 - Lproj / h, 0.05 * max(Lproj/h, 1));
    
    float L0 = length(v2 - v0);
    float L1 = length(v2 - v1) + length(v1 - v0);
    float L = (2 * L0 + (2 - 1) * L1) / (2 + 1);
    float r = h / L;

    v1 = v0 + r * (v1 - v0);
    v2 = v1 + r * (v2 - v1);

    in_blades[id].v1 = vec4(v1, b.v1.w);
    in_blades[id].v2 = vec4(v2, b.v2.w);

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
    // Reset the number of blades to 0

    vec3 eye_pos = inverse(camera.view)[3].xyz;
    // Orientation culling
    #if ORIE_CULL
        vec3 dirC = eye_pos - v0;
        vec3 dirB = orient;
        if (abs(dot(normalize(dirC), normalize(dirB))) >= 0.9)
           return;
    #endif

    // Frustum culling
    #if VIEW_CULL
        vec3 m = (1/4) * v0 * (1/2) * v1 * (1/4) * v2; // midpoint
        if(!(inFrustum(v0) && inFrustum(v2) && inFrustum(m)))
             return;
    #endif

    // Distance culling
    #if DIST_CULL
        float dProj = length(v0 - eye_pos - up * dot((v0 - eye_pos), up));
        uint n = 10;
        if (mod(id, n) >= (n * (1 - dProj / dMax)))
           return;
    #endif

    culled_blades[atomicAdd(numBlades.vertexCount, 1)] = in_blades[id];
}