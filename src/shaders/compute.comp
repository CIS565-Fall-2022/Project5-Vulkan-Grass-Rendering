#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define CULL 1
#define WIND 1
#define RESIST 1

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//

layout(set = 2, binding = 0) buffer Blades {
    Blade blades[];
}; 

layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
} numBlades;


bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

// Cosine Noise Function from 460
float rand3D(vec3 p, float time) {
    return cos(float(time) * 0.008) * sin(length(vec3(
                            dot(p, vec3(164.1, 348.1, 392.1)), 
                            dot(p, vec3(836.5, 287.3, 723.1)),
                            dot(p, vec3(265.4, 148.2, 222.2))
                          ) * 0.01 ));
}

float interpNoise3D(vec3 p, float time)
{
    int intX = int(floor(p.x));
    float fractX = fract(p.x);
    
    int intY = int(floor(p.y));
    float fractY = fract(p.y);
    
    int intZ = int(floor(p.z));
    float fractZ = fract(p.z);

    float v1 = rand3D(vec3(intX, intY, intZ), time);
    float v2 = rand3D(vec3(intX + 1, intY, intZ), time);
    float v3 = rand3D(vec3(intX, intY + 1, intZ), time);
    float v4 = rand3D(vec3(intX + 1, intY + 1, intZ), time);
    float v5 = rand3D(vec3(intX, intY, intZ + 1), time);
    float v6 = rand3D(vec3(intX + 1, intY, intZ + 1), time);
    float v7 = rand3D(vec3(intX, intY + 1, intZ + 1), time);
    float v8 = rand3D(vec3(intX + 1, intY + 1, intZ + 1), time);

    float i1 = mix(v1, v2, fractX);
    float i2 = mix(v3, v4, fractY);
    float i3 = mix(v5, v6, fractY);
    float i4 = mix(v7, v8, fractZ);
    float i5 = mix(v1, v3, fractZ);
    float i6 = mix(v2, v4, fractX);
    float i7 = mix(v5, v7, fractZ);
    float i8 = mix(v6, v8, fractX);

    float mix1 = mix(mix(i1, i2, fractZ), mix(i3, i4, fractX), fractY);
    float mix2 = mix(mix(i5, i6, fractX), mix(i7, i8, fractY), fractZ);
    float finalMix = mix(mix1, mix2, fractX);
    return finalMix;
}

vec3 fbm(vec3 p, float time)
{
    float total = 0.f;
    
    float persist = 0.5f;
    float freq = 1.f;
    float amp = 2.f;

    for (int i = 1; i <= 6; i++) {
        total += amp * interpNoise3D(freq * p, time);
        freq *= 2.0;
        amp *= persist;
    }

    return 9 * vec3((1 - total) * sin(time), 0, total * cos(time));
}


void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    uint idx = gl_GlobalInvocationID.x;

    vec3 v0 = vec3(blades[idx].v0);
    vec3 v1 = vec3(blades[idx].v1);
    vec3 v2 = vec3(blades[idx].v2);
    vec3 up = vec3(blades[idx].up);

    float theta = blades[idx].v0.w;
    float bladeHeight = blades[idx].v1.w;
    float width = blades[idx].v2.w;
    float stiffness = blades[idx].up.w;

    vec3 bitangent = vec3(width * cos(theta), 0, width * sin(theta));

    // gravity
    float environmental = length(vec3(0.0, -1.0, 0.0) * 9.8);
    vec3 norm = cross(up, bitangent);
    vec3 front = 0.25 * norm * environmental;
    vec3 gravity = front + environmental;

    // recovery

    vec3 v2_0 = v0 + bladeHeight * up;
#if RESIST
    vec3 recovery = (v2_0 - v2) * stiffness;
#else
    vec3 recovery = vec3(0,0,0);
#endif
    // wind
    vec3 windDir = fbm(v0, totalTime);
    float fd = 1 - length(dot(normalize(windDir), normalize(v2 - v0)));
    float fr = dot(normalize(v2 - v0), up) / bladeHeight;
    float windAlignment = 3 * fd * fr;

#if WIND
    vec3 wind = windDir * windAlignment;
#else 
    vec3 wind = vec3(0,0,0);
#endif

    vec3 deltaV2 = (gravity + recovery + wind) * deltaTime;

    v2 += deltaV2;

    v2 = v2 - up * min(dot(up, (v2 - v0)), 0.0);

    float lProj = length(v2 - v0 - up * dot((v2 - v0), up));
    v1 = v0 + bladeHeight * up * 
         max(1 - (lProj / bladeHeight), 
             0.05 * max(lProj / bladeHeight, 
             1));

    float l0 = distance(v2, v0);
    float l1 = distance(v2, v1) + distance(v1, v0);
    float len = (2 * l0 + 2 * l1) / 4;
    float r = bladeHeight / len;

    v1 = v0 + r * (v1 - v0);
    v2 = v1 + r * (v2 - v1);

    blades[idx].v1.xyz = v1.xyz;
    blades[idx].v2.xyz = v2.xyz;

#if CULL    
    vec3 cameraPos = vec3(inverse(camera.view)[3]);
    vec3 camToBladeVec = v0 - cameraPos - up * dot(v0 - cameraPos, up);
    
    float projDist = length(camToBladeVec);
    int maxDist = 40; 
    int n = 4;

    float cullFactor = floor(n * (1 - projDist / maxDist));

    if (idx % n >= cullFactor) {
        // GET CULLED BASED ON DISTANCE BOI
        return;
   }

    vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
    vec4 p1 = camera.proj * camera.view * vec4(m, 1.0);
    float h = p1.w * 0.95;
    bool inView = inBounds(p1.x, h) && inBounds(p1.y, h);

    if (!inView) {
    // GET CULLED OUT OF THE FRUSTRUM BOI
       return;
    }

    
    float orientation = abs(dot(camToBladeVec, bitangent));

    if (orientation > 0.9) {
        // get CULLED BASED ON ORIENTATION BOI
        return;
    }

#endif

    uint originalVertCount = atomicAdd(numBlades.vertexCount, 1);
    culledBlades[originalVertCount] = blades[idx];
}