#version 450
#extension GL_ARB_separate_shader_objects : enable

// Force Settings
#define ENABLE_GRAVITY true
#define ENABLE_RECOVERY true
#define ENABLE_WIND true

#define GRAVITY 4.0

#define WIND_DIR normalize(vec3(0.2, 0, 0.5))
#define WIND_STRENGTH 5.0
#define WING_FREQUENCY 0.5
#define WIND_LENGTH 0.2

// Culling Settings
#define ENABLE_ORIENTATION_CULLING true
#define ENABLE_FRUSTUM_CULLING true
#define ENABLE_DIESANCE_CULLING true

#define FACE_CULLING_THRESHOLD 0.9

#define FRUSTUM_CULLING_THRESHOLD 1.1

#define DISTANCE_CULLING_MAX_DIST 20.0

#define DISTANCE_CULLING_N 8

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

layout(set = 2, binding = 0) buffer Blades 
{
    Blade blades[];  
};

layout(set = 2, binding = 1) buffer CulledBlades 
{
    Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades 
{
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
 } numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}


vec2 random2(vec2 p)
{
    return fract(sin(vec2(dot(p, vec2(127.1f, 311.7f)),
                     dot(p, vec2(269.5f,183.3f))))
                     * 43758.5453f);
}

float surflet(vec2 p, vec2 gridPoint)
{
    // Compute the distance between p and the grid point along each axis, and warp it with a
    // quintic function so we can smooth our cells
    vec2 t2 = abs(p - gridPoint);
    //vec2 t = vec2(1.f) - 6.f * pow(t2, vec2(5.f)) + 15.f * pow(t2, vec2(4.f)) - 10.f * pow(t2, vec2(3.f));
    vec2 t;
    t.x = 1.f - 6.f*t2.x*t2.x*t2.x*t2.x*t2.x + 15.f*t2.x*t2.x*t2.x*t2.x - 10.f*t2.x*t2.x*t2.x;
    t.y = 1.f - 6.f*t2.y*t2.y*t2.y*t2.y*t2.y + 15.f*t2.y*t2.y*t2.y*t2.y - 10.f*t2.y*t2.y*t2.y;
    // Get the random vector for the grid point (assume we wrote a function random2
    // that returns a vec2 in the range [0, 1])
    vec2 gradient = random2(gridPoint) * 2.f - vec2(1.f,1.f);
    // Get the vector from the grid point to P
    vec2 diff = p - gridPoint;
    // Get the value of our height field by dotting grid->P with our gradient
    float height = dot(diff, gradient);
    // Scale our height field (i.e. reduce it) by our polynomial falloff function
    return height * t.x * t.y;
}

float perlin2D(vec2 uv)
{
    float surfletSum = 0.f;
    // Iterate over the four integer corners surrounding uv
    for(int dx = 0; dx <= 1; ++dx) {
        for(int dy = 0; dy <= 1; ++dy) {
            surfletSum += surflet(uv, floor(uv) + vec2(dx, dy));
        }
    }
    return surfletSum;
}

void main() 
{
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) 
    {
		 numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer

    Blade blade = blades[gl_GlobalInvocationID.x];

    vec3 eye = vec3(inverse(camera.view) * vec4(0.f, 0.f, 0.f, 1.f));
    vec3 up = blade.up.xyz;
    vec3 v0 = blade.v0.xyz;
    vec3 v1 = blade.v1.xyz;
    vec3 v2 = blade.v2.xyz;
    float theta = blade.v0.w;
    float height = blade.v1.w;
    float k = blade.up.w;   // stiffness coefficient
    
    //vec3 bitangent = vec3(cos(theta), 0, -sin(theta));
    vec3 bitangent = vec3(-cos(theta), 0, sin(theta));
    
    // Forces
    vec3 recovery = vec3(0.0);
    vec3 gravity = vec3(0.0);
    vec3 wind = vec3(0.0);

    // 1. Recovery
    if(ENABLE_RECOVERY)
    {
        vec3 i_v2 = v0 + up * height;
        recovery = (i_v2 - v2) * k;
    }

    // 2. Gravity
    if(ENABLE_GRAVITY)
    {
        vec3 gE = vec3(0.0, -1.0, 0.0) * GRAVITY;
        vec3 nor = cross(up, bitangent);
        vec3 gF = 0.25 * length(gE) * nor;
        gravity = gE + gF;
    }

    // 3. Wind
    if(ENABLE_WIND)
    {
        //wind = WIND_DIR * WIND_STRENGTH * cos(WING_FREQUENCY * totalTime + WIND_LENGTH * v0);
        wind = WIND_DIR * WIND_STRENGTH * cos(WING_FREQUENCY * totalTime + WIND_LENGTH * v0 + perlin2D(v0.xz));
    }   

    // Total force
    vec3 deltaPos = (recovery + gravity + wind) * deltaTime;  

    // Update v2
    v2 += deltaPos;
    v2 -= up * min(dot(up, v2 - v0), 0); // state validation

    // Update v1
    float lproj = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + height * up * max(1 - lproj / height, 0.05 * max(lproj/height, 1));

    // Ensure length of curve is valid
    float L0 = length(v2 - v0);
    float L1 = length(v2 - v1) + length(v1 - v0);
    float L = (2 * L0 + L1) / 3;
    float r = height / L;

    v1 = v0 + r * (v1 - v0);
    v2 = v1 + r * (v2 - v1);

    // Update buffer
    blades[gl_GlobalInvocationID.x].v1.xyz = v1.xyz;
    blades[gl_GlobalInvocationID.x].v2.xyz = v2.xyz;

    barrier();

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    if(ENABLE_ORIENTATION_CULLING || ENABLE_FRUSTUM_CULLING || ENABLE_DIESANCE_CULLING)
    {
        // Orientation culling
        if(ENABLE_ORIENTATION_CULLING)
        {        
            
            vec3 viewDir = eye - v0;          
            if(abs(dot(normalize(viewDir), normalize(bitangent))) > FACE_CULLING_THRESHOLD)
            {
                return;
            }
        }

        // Frustum culling
        if(ENABLE_FRUSTUM_CULLING)
        {
            vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;      
            mat4 viewProj = camera.proj * camera.view;
            
            // Points to NDC 
            vec4 normalizedV0 = viewProj * vec4(v0, 1.f); 
            vec4 normalizedM = viewProj * vec4(m, 1.f); 
            vec4 normalizedV2 = viewProj * vec4(v2, 1.f); 
            normalizedV0 /= normalizedV0.w;
            normalizedM /= normalizedM.w;
            normalizedV2 /= normalizedV2.w;

            bool testV0 = inBounds(normalizedV0.x, FRUSTUM_CULLING_THRESHOLD) && 
                inBounds(normalizedV0.y, FRUSTUM_CULLING_THRESHOLD);
            bool testM = inBounds(normalizedM.x, FRUSTUM_CULLING_THRESHOLD) &&
                inBounds(normalizedM.y, FRUSTUM_CULLING_THRESHOLD);
            bool testV2 = inBounds(normalizedV2.x, FRUSTUM_CULLING_THRESHOLD) && 
                inBounds(normalizedV2.y, FRUSTUM_CULLING_THRESHOLD);

            if(!testV0 && !testM && !testV2)
            {
                return;
            }
        }

        // Distance culling
        if(ENABLE_DIESANCE_CULLING)
        {
            float dProj = length(v0 - eye - up * dot((v0 - eye), up));

            if(mod(gl_GlobalInvocationID.x, DISTANCE_CULLING_N) >= 
                (DISTANCE_CULLING_N * (1 - dProj / DISTANCE_CULLING_MAX_DIST)))
            {
                return;
            }
        }
    }

    uint addIndex = atomicAdd(numBlades.vertexCount, 1);
    culledBlades[addIndex] = blades[gl_GlobalInvocationID.x];
}