#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define APPLY_FORCE 1
#define ORIENTATION_CULL 0
#define VIEWFRUSTUM_CULL 0
#define DISTANCE_CULL 0

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

layout(set = 2, binding = 0) buffer Blades{
    Blade blades[];
};

layout(set = 2, binding = 1) buffer Culls{
    Blade culls[];
};

layout(set = 2, binding = 2) buffer NumBlades{
    uint vertexCount;   // Write the number of blades remaining here
 	uint instanceCount; // = 1
 	uint firstVertex;   // = 0
 	uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

vec3 getWindDir(vec3 pos, float windStrength){
    vec3 dir = vec3(cos(totalTime), 0, sin(totalTime));
    return dir * windStrength;
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    Blade currBlade = blades[gl_GlobalInvocationID.x];
    vec3 v0 = vec3(currBlade.v0);
    vec3 v1 = vec3(currBlade.v1);
    vec3 v2 = vec3(currBlade.v2);
    vec3 up = vec3(currBlade.up);
    float dirAng = currBlade.v0.w;
    vec3 dir = vec3(cos(dirAng), 0, sin(dirAng));
    float height = currBlade.v1.w;
    float s = currBlade.up.w;
#if APPLY_FORCE
    // TODO: Apply forces on every blade and update the vertices in the buffer
    //environmental parameters to define
    float gravity = 9.8;
    float windStrength = 10;
    
    //gravity
    vec3 gE = vec3(0, -1, 0) * gravity;
    vec3 gF = gravity * 0.25 * dir;
    vec3 g = gE + gF;

    //recovery
    vec3 Iv2 = v0 + up * height;
    vec3 r = (Iv2 - v2) * s;

    //wind
    vec3 windDir = getWindDir(v0, windStrength);
    float fd = 1 - length(dot(normalize(windDir), normalize(v2 - v0)));
    float fr = dot(v2 - v0, up) / height;
    vec3 w = fd * fr * windDir;

    //total force
    vec3 Tv2 = (g + r + w) * deltaTime;
    
    //update
    v2 = v2 + Tv2;
    if(v2.y < 0.f){
        v2.y = 0.f;
    }
    float Lproj = length(v2 - v0 - up * dot((v2 - v0), up));
    v1 = v0 + height * up * max(1 - (Lproj / height), 0.05 * max(Lproj / height, 1));
    float L0 = length(v0 - v2);
    float L1 = length(v2 - v1) + length(v1 - v0);
    int degree = 2;  //beizier curve degree
    float L = (2 * L0 + (degree - 1) * L1) / (degree + 1);
    float R = height / L;
    v1 = v0 + R * (v1 - v0);
    v2 = v1 + R * (v2 - v1);

    blades[gl_GlobalInvocationID.x].v1.xyz = v1.xyz;
    blades[gl_GlobalInvocationID.x].v2.xyz = v2.xyz;
#endif

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    //parameter to define
    float orientationTolerance = 0.6;
    float tolerance = 0.001;   //tolerance parameter for view-frustum culling
    int n = 10;    //distance culling number of buskets
    float dmax = 20;  //distance culling max distance

#if ORIENTATION_CULL
    //orientation culling
    vec3 camPosXZ = vec3(inverse(camera.view)[3]);
    camPosXZ.y = 0;
    vec3 camPosXZNor = normalize(camPosXZ);
    if(abs(dot(camPosXZNor, dir)) > orientationTolerance){
        return;
    }
#endif
#if VIEWFRUSTUM_CULL
    //view-frustum culling
    vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
    mat4 viewPro = camera.proj * camera.view;
    vec4 p_prime = viewPro * vec4(m, 1);
    float h = abs(p_prime.w) + tolerance;
    if(!((inBounds(p_prime.x, h) && inBounds(p_prime.y, h)) && inBounds(p_prime.z, h))){
        return; 
    }
#endif
#if DISTANCE_CULL
    //distance culling
    vec3 cameraPos = vec3(inverse(camera.view)[3]);
    float dproj = length(v0 - cameraPos - up*(dot(v0 - cameraPos, up)));
    if((gl_GlobalInvocationID.x % n) > (n * (1 - (dproj / dmax)))){
        return;
    }



#endif

    uint vertCountUpdated = atomicAdd(numBlades.vertexCount, 1);
    culls[vertCountUpdated] = blades[gl_GlobalInvocationID.x];

}