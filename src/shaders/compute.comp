#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32

#define MAX_DIST 60
#define NUM_BUCKETS 100

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};


// v0.w holds orientation, v1.w holds height, v2.w holds width, and up.w holds the stiffness coefficient.
struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
 layout(set = 2, binding = 0) buffer Blades {
    Blade blades[];
 };

  layout(set = 2, binding = 1) buffer CulledBlades {
   Blade culledBlades[];
 };

 layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
 } numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool inFrustum(vec3 p)
{
    float t = 0.1; // tolerance
    vec4 pp =  camera.proj * camera.view *vec4(p, 1.0);
    float h = pp.w + t;
    return inBounds(pp.x, h) && inBounds(pp.y, h) && inBounds(pp.z, h);
}


void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		 numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
    Blade blade = blades[gl_GlobalInvocationID.x];
    vec3 v0 = blade.v0.xyz;
    vec3 v1 = blade.v1.xyz;
    vec3 v2 = blade.v2.xyz;
    vec3 up = blade.up.xyz;

    float theta = blade.v0.w;
    float h = blade.v1.w;
    float w = blade.v2.w;
    float s = blade.up.w;

    
    // Blade Culling
    // Orientation Culling 
    vec3 dir_c = camera.view[3].xyz;
    vec3 dir_b = vec3(cos(theta), 0.0, sin(theta));
    if (0.9 > abs(dot(dir_c, dir_b)))
        return;

    // View-frustum Culling 
    vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
    if (!inFrustum(v0) && !inFrustum(v2) && !inFrustum(m))
        return;

    // Distance Culling
    vec3 view = v0 - camera.view[3].xyz;
    float view_proj = length(view - up * dot(view, up));
    if (gl_GlobalInvocationID.x % NUM_BUCKETS >=  NUM_BUCKETS * max(1.0 - view_proj / MAX_DIST, 0.0))
        return;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
    uint idx = atomicAdd(numBlades.vertexCount, 1);
    culledBlades[idx] = blades[idx];
}
