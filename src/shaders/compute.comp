#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define CULLING true
#define ORIENTATION_CULL true
#define VIEW_FRUSTUM_CULL true
#define DISTANCE_CULL true
#define DISTANCEMAX 15
#define DISTANCECULLINGLEVEL 10
#define WINDSTR 5.0

#define D vec4(0, -1.0, 0, 9.81)
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
} time;

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// GLSL Noise Algorithm from: https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83 
// using generic 2d noise because we only need two direction
float hash(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }

float noise(vec2 x) {
	vec2 i = floor(x);
	vec2 f = fract(x);

	// Four corners in 2D of a tile
	float a = hash(i);
	float b = hash(i + vec2(1.0, 0.0));
	float c = hash(i + vec2(0.0, 1.0));
	float d = hash(i + vec2(1.0, 1.0));
	vec2 u = f * f * (3.0 - 2.0 * f);
	return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}

vec3 windFunc(float t, vec3 v0){
    float n = noise(v0.xz);
    return WINDSTR*vec3(sin(t)+n, 0, sin(t)+n);
}

layout(set = 2, binding = 0) buffer Blades {
    Blade data[];
} blades;

layout(set = 2, binding = 1) buffer CulledBlades {
    Blade data[];
} culledBlades;

layout(set = 2, binding = 2) buffer NumBlades {
      uint vertexCount;   // Write the number of blades remaining here
	  uint instanceCount; // = 1
	  uint firstVertex;   // = 0
	  uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool inBounds(vec3 value, float bounds) {
    return (value.x >= -bounds) && (value.x <= bounds) 
    && (value.y >= -bounds) && (value.y <= bounds)
    && (value.z >= -bounds) && (value.z <= bounds);
}

bool inFrustum(vec3 p) {
    float t = 0.01f;
    vec4 pNorm = camera.proj * camera.view * vec4(p, 1.0);
    float h = pNorm.w + t;
    return inBounds(pNorm.xyz, h);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
    Blade blade = blades.data[gl_GlobalInvocationID.x];
    //initialization
    vec3 up = blade.up.xyz;
    vec3 v0 = blade.v0.xyz;
    vec3 v1 = blade.v1.xyz;
    vec3 v2 = blade.v2.xyz;
    float ori = blade.v0.w;
    float height = blade.v1.w;
    float width = blade.v2.w;
    float stiffness = blade.up.w;

    //gravity
    vec3 gE = normalize(D.xyz) * D.w;
    vec3 f = normalize(cross(vec3(-cos(ori), 0, sin(ori)), up));
    vec3 gF = 0.25 * abs(gE) * f;
    vec3 g = gE + gF;

    //recovery derived in the paper using Hooke's Law
    vec3 iv2 = v0 + up * height;
    vec3 r1 = (iv2 - v2) * stiffness;

    //wind
    vec3 windDir = windFunc(time.totalTime, v0);

    float fd = 1 - abs(dot(normalize(windDir), normalize(v2 - v0)));
    float fr = dot(v2 - v0, up) / height;
    vec3 w = windDir * fd * fr;


    //total force
    vec3 tv2 = (f + r1 + w) * time.deltaTime;
    v2 += tv2;

    //state validation
    v2 -= up * min(dot(up, (v2-v0)), 0);
    float lproj = length(v2 - v0 - up * dot((v2 - v0), up));
    v1 = v0 + height * up * max(1.f - lproj / height, 0.05f * max(lproj / height, 1.f));

    float l0 = length(v2 - v0);
    float l1 = length(v2 - v1) + length(v1 - v0);
    float l = (2 * l0 + l1)/3; //n=3
    float r2 = height/l;

    v1 = v0 + r2 * (v1 - v0);
    v2 = v1 + r2 * (v2 - v1);
    blades.data[gl_GlobalInvocationID.x].v1.xyz = v1.xyz;
    blades.data[gl_GlobalInvocationID.x].v2.xyz = v2.xyz;


	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
    if (CULLING) {
    //orientation test
        vec4 dirb = vec4(-cos(ori), 0.f, sin(ori), 0.f);
        float result = abs(normalize(vec3(camera.view * dirb)).z);
        if (ORIENTATION_CULL && result > 0.9) {
            return;
        }

        //view-frustum test
        vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
        if (VIEW_FRUSTUM_CULL &&  !inFrustum(m) && !inFrustum(v0) && !inFrustum(v2)) {
            return;
        }

        //distance test
        vec3 c = inverse(camera.view)[3].xyz;
        float dproj = length(v0 - c - up * dot((v0-c), up));
        uint dmax = DISTANCECULLINGLEVEL;
        if (DISTANCE_CULL &&  gl_GlobalInvocationID.x % DISTANCEMAX < int(floor(DISTANCEMAX * (1 - dproj / dmax)))) {
            return;
        }
    }
    //occlusion test

	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
    uint idx = atomicAdd(numBlades.vertexCount, 1);
    culledBlades.data[idx] = blade;
}


