#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define FRUSTUM_TOLERANCE 0.01

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
layout(set = 2, binding = 0) buffer InBlades { Blade in_blades[];
} inBlades;
// 2. Write out the culled blades
layout(set = 2, binding = 1) buffer CulledBlades { Blade culled_blades[]; 
} culledBlades;

// 3. Write the total number of blades remaining
// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
layout(set = 2, binding = 2) buffer NumBlades {
  uint vertexCount;    // Write the number of blades remaining here
  uint instanceCount;  // = 1
  uint firstVertex;    // = 0
  uint firstInstance;  // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool isInFrustum(vec3 pos) {
    mat4 view_proj = camera.proj * camera.view;
    vec4 pos_ndc = view_proj * vec4(pos, 1.0);
    float h = pos_ndc.w + FRUSTUM_TOLERANCE;

    return inBounds(pos_ndc.x, h) && inBounds(pos_ndc.y, h) && inBounds(pos_ndc.z, h);
}

// Reference: Noise function
// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
vec3 noise(vec3 p) { 
    return fract(sin(vec3(dot(p, vec3(127.1, 311.7, 513.76)),
        dot(p, vec3(269.5, 183.3, 389.22)),
        dot(p, vec3(378.1, 210.4, 193.9)))) * 43758.5453); 
}

// Reference: Responsive Real-Time Grass Rendering for General 3D Scenes
// https://www.cg.tuwien.ac.at/research/publications/2017/JAHRMANN-2017-RRTG/JAHRMANN-2017-RRTG-draft.pdf
void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
	    numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
    Blade blade = inBlades.in_blades[gl_GlobalInvocationID.x];
    vec3 v0 = blade.v0.xyz;
    vec3 v1 = blade.v1.xyz;
    vec3 v2 = blade.v2.xyz;
    vec3 up = blade.up.xyz;
    float theta = blade.v0.w; //blade orientation
    float height = blade.v1.w;
    float width = blade.v2.w;
    float k = blade.up.w; //blade stiffness
    vec3 tangent = vec3(cos(theta), 0.0, sin(theta));
    vec3 front = cross(tangent, up);

    vec3 ge = vec3(0.0, -9.81, 0.0);
    vec3 gravity = ge + (0.25 * length(ge) * front); //env + forward gravity

    vec3 iV2 = v0 + up * height;  // natural state
    vec3 recovery = (iV2 - v2) * k; 
    
    vec3 wind = noise(v0) * 3.0 * sin(totalTime);
    float f_d = 1 - abs(dot(normalize(wind), normalize(v2 - v0))); 
    float f_r = dot(v2 - v0, up) / height;   
    vec3 wind_force = wind * f_d * f_r;

    v2 += deltaTime * (recovery + gravity + wind_force);
    v2 = v2 - up * min(dot(up, v2 - v0), 0.0); //state validation

    float lproj = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + height * up * max(1 - lproj / height, 0.05 * max(lproj / height, 1.0));

    float L0 = distance(v2, v0);
    float L1 = distance(v1, v0) + distance(v2, v1);
    // degree of Bezier curve
    const float n = 2.0;
    // estimated curve length
    float L = (2 * L0 + (n - 1) * L1) / (n + 1);

    float ratio = height / L;

    v1 = v0 + ratio * (v1 - v0);
    v2 = v1 + ratio * (v2 - v1);

    //update blade buffer
    blade.v1.xyz = v1;
    blade.v2.xyz = v2;
    inBlades.in_blades[gl_GlobalInvocationID.x] = blade;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
    // Orientation Culling
    vec3 view_dir = normalize(vec3(inverse(camera.view) * vec4(0.0, 0.0, 0.0, 1.0)));
    vec3 blade_dir = vec3(cos(theta), 0.0, sin(theta));
    
    if (abs(dot(view_dir, blade_dir)) > 0.9)
        return;

    // View-Frustum Culling
    vec3 midpoint = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
    if (!isInFrustum(v0) && !isInFrustum(v2) && !isInFrustum(midpoint))
        return;

    // Distance Culling
    vec3 cam_pos = inverse(camera.view)[3].xyz; // in world space
    float d_proj = length(v0 - cam_pos - up * dot(v0 - cam_pos, up));
    const float max_dist = 20.0;
    const int num_buckets = 20;
    if((gl_GlobalInvocationID.x % num_buckets) > floor(num_buckets * (1 - d_proj / max_dist)))
        return;
    culledBlades.culled_blades[atomicAdd(numBlades.vertexCount, 1)] = blade;
}
