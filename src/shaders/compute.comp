#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
layout(set = 2, binding = 0) buffer Blades {
    Blade blades[];
};

// 2. Write out the culled blades
layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledBlades[];
};

// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool insideViewFrustum(vec4 point, mat4 vp){
    float tolerance = 0.05f;

    vec4 point_ = vp * point;

    float h = point_.w + tolerance;

    return inBounds(point_.x, h) && inBounds(point_.y, h) && inBounds(point_.z, h);
}

vec3 random3(vec3 c) {
	float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
	vec3 r;
	r.z = fract(512.0*j);
	j *= .125;
	r.x = fract(512.0*j);
	j *= .125;
	r.y = fract(512.0*j);
	return r-0.5;
}

vec3 hash3( vec2 p ){
    vec3 q = vec3( dot(p,vec2(127.1,311.7)), 
				   dot(p,vec2(269.5,183.3)), 
				   dot(p,vec2(419.2,371.9)) );
	return fract(sin(q)*43758.5453);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
    numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

  Blade blade = blades[gl_GlobalInvocationID.x];

  vec3 v0 = blade.v0.xyz;
  vec3 v1 = blade.v1.xyz;
  vec3 v2 = blade.v2.xyz;
  vec3 up = blade.up.xyz;

  float orientation = blade.v0.w;
  float height = blade.v1.w;
  float width = blade.v2.w;
  float stiffness = blade.up.w;

  vec3 t1 = normalize(vec3(cos(orientation), 0.f, sin(orientation)));

  // TODO: Apply forces on every blade and update the vertices in the buffer
  
  // Gravity 
  vec4 D = vec4(0.f, -1.f, 0.f, 9.8f);
  vec3 gE = normalize(D.xyz) * D.w;
  vec3 f = normalize(cross(t1, up));
  vec3 gF = 0.25f * length(gE) * f;

  vec3 gravity = gE + gF;

  // Recovery
  vec3 iv2 = v0 + height * up;
  vec3 recovery = (iv2 - v2) * stiffness;

  // Wind
  vec3 wind = hash3(v0.xz) * sin(totalTime * 1.5) * 3;

  float f_d = 1 - abs(dot((normalize(wind)), normalize(v2 - v0)));
  float f_r = dot(v2 - v0, up) / height;

  wind = wind * f_d * f_r;

  // Total Force
  vec3 totalForce = gravity + recovery + wind;

  // Apply froce to control points
  v2 = v2 + deltaTime * totalForce;

  // Ensure v2 above the local plane
  v2 = v2 - up * min(dot(up, (v2 - v0)), 0);

  // Length (v2, v0) projected onto the ground
  float l_proj = length(v2 - v0 - up * dot((v2 - v0), up));

  // Ensure v0 != v1
  v1 = v0 + height * up * max(1 - (l_proj / height), 0.05 * max((l_proj / height), 1));

  // Ensure lenth of curve < height of blade
  float L0 = length(v2 - v0);
  float L1 = length(v1 - v0) + length(v2 - v1);
  float n = 2.f;
  float L = (2.f * L0 + (n - 1) * L1) / (n + 1);

  // Correction
  float r = height / L;
  v1 = v0 + r * (v1 - v0);
  v2 = v1 + r * (v2 - v1);

  blade.v1.xyz = v1.xyz;
  blade.v2.xyz = v2.xyz;
  blades[gl_GlobalInvocationID.x] = blade;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

  // Orientation culling
  vec3 c = inverse(camera.view)[3].xyz;
  vec3 viewDir = (v0 - c - up * dot((v0 - c), up));
  vec3 widthDir = t1;

  if(abs(dot(normalize(viewDir), widthDir)) > 0.9){
      return;
  }

  // View-frustum culling
  mat4 vp = camera.proj * camera.view;
  vec3 m = 0.25f * v0 + 0.5f * v1 + 0.25f * v2;

  if(!insideViewFrustum(vec4(v0, 1.f), vp) || !insideViewFrustum(vec4(v2, 1.f), vp) || !insideViewFrustum(vec4(m, 1.f), vp)){
      return;
  }

  // Distance test
  float d_proj = length(viewDir);

  int levels = 10;
  float d_max = 25.f;
  bool isCulled = (gl_GlobalInvocationID.x % levels) > (floor(levels * (1.f - d_proj / d_max)));
  if(isCulled){
      return;
  }

  culledBlades[atomicAdd(numBlades.vertexCount, 1)] = blade;
}
