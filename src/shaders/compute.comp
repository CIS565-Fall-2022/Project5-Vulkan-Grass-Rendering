#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//

 layout(set = 2, binding = 0) buffer AllBlades {
    Blade allBlades[];
 }  ;

  layout(set = 2, binding = 1) buffer BladesCulled {
    Blade bladesCulled[];
 }  ;

 layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
 } numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool testPoint(vec3 testP) {
    vec4 result = camera.proj * camera.view * vec4(testP, 1.0);
    float offset = .8;
    float h = result.w * offset;
    return (inBounds(result.x, h) && inBounds(result.y, h));
}

vec3 wi(vec3 base) {
    return normalize(vec3(cos(totalTime + cos(base.x + base.z)), 0.0, sin(totalTime + cos(base.x + base.z))));
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
        numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    Blade currentBlade = allBlades[gl_GlobalInvocationID.x];
    vec4 v0t = currentBlade.v0;
    vec4 v1t = currentBlade.v1;
    vec4 v2t = currentBlade.v2;
    vec4 upt = currentBlade.up;

    vec3 v0 = vec3(v0t);
    vec3 v1 = vec3(v1t);
    vec3 v2 = vec3(v2t);
    vec3 up = vec3(upt);

    float direction = v0t.w;
    float h = v1t.w;

    // TODO: Apply forces on every blade and update the vertices in the buffer
    vec3 parallel = normalize(vec3(v2t[3] * cos(direction), 0.f, v2t[3] * sin(direction))); 
    vec3 gE = vec3(0.0, -1.0, 0.0) * 1.0;
    vec3 gF = 1 / 4 * length(gE) * parallel;
    vec3 g = gE + gF;

    vec3 rec = (vec3(0.0, h, 0.0) + v0 - v2);// * upt[3];

    float fd = 1 - abs(dot(normalize(wi(v0)), normalize(v2-v0)));
    float fr = dot(v2 - v0, up) / h;
    vec3 w = wi(v0) * fd * fr;

    //w = vec3(0, 0, 0);
    //g = vec3(0, 0, 0);
    //rec = vec3(0, 0, 0);

    v2 += (g + rec + w) * deltaTime;

    v2 = v2 - up * min(dot(up, v2 - v0), 0.0);
    
    float lproj = length(v2 - v0 - up * dot(v2-v0, up));

    v1 = v0 + h * up * max(1 - lproj / h, 0.05 * max(lproj / h, 1.0));

    float n = 2.0;
    float L = (2 * distance(v2, v0) + (n - 1) * (distance(v0, v1) + distance(v1, v2))) / (n + 1);
    float r = h / L;

    vec3 v1corr = v0 + r * (v1 - v0);
    vec3 v2corr = v1 + r * (v2 - v1);

    allBlades[gl_GlobalInvocationID.x].v1 = vec4(v1corr, h);
    allBlades[gl_GlobalInvocationID.x].v2 = vec4(v2corr, v2t[3]);


	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    currentBlade = allBlades[gl_GlobalInvocationID.x];
    v0t = currentBlade.v0;
    v1t = currentBlade.v1;
    v2t = currentBlade.v2;
    upt = currentBlade.up;
    bool culled = false;
    
    mat4 viewModel = inverse(camera.view);
    vec3 cameraPos = vec3(viewModel[3]); 
    vec3 forward = normalize(vec3(cameraPos.x, 0.0, cameraPos.z));

    if (abs(dot(forward, parallel)) > .9) {
        return;
    }

    vec3 m = (1/4) * vec3(v0t) * (1/2) * vec3(v1t) * (1/4) * vec3(v2t);
    
    if (!testPoint(vec3(v0t)) && !testPoint(vec3(v2t)) && !testPoint(m)) {
        return;
    }

    float distance = distance(vec3(v0t), vec3(cameraPos));

    if (distance > 30.0) {
        return;
    }
    if (distance > 20.0 && gl_GlobalInvocationID.x % 2 == 0) {
        return;
    }
    if (distance > 15.0 && gl_GlobalInvocationID.x % 3 == 0) {
        return;
    }
    
    uint newIdx = atomicAdd(numBlades.vertexCount, 1);
    bladesCulled[newIdx] = allBlades[gl_GlobalInvocationID.x];
}
