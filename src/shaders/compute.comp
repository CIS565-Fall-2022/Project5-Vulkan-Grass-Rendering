#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//

 layout(set = 2, binding = 0) buffer AllBlades {
    Blade allBlades[];
 }  ;

  layout(set = 2, binding = 1) buffer BladesCulled {
    Blade bladesCulled[];
 }  ;

 layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
 } numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		// numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
    

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
    bool culled = false;

    Blade currentBlade = allBlades[gl_GlobalInvocationID.x];
    vec4 v0t = currentBlade.v0;
    vec4 v1t = currentBlade.v1;
    vec4 v2t = currentBlade.v2;
    vec4 upt = currentBlade.up;

    float direction = v0t.w;
    vec3 forward = normalize(vec3(camera.view[2]));
    vec3 parallel = normalize(vec3(v2t[3] * sin(direction), 0.f, v2t[3] * cos(direction))); 

    if (abs(dot(forward, parallel)) > .9) {
        culled = true;
    }

    if (culled == false) {
        bladesCulled[gl_GlobalInvocationID.x] = allBlades[gl_GlobalInvocationID.x];
        atomicAdd(numBlades.vertexCount, 1);
    }
}
