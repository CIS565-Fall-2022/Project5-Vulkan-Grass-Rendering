#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// for blades
layout(set = 2, binding = 0) buffer  Blades {
     Blade blades[];
};

// for culledBlades
layout(set = 2, binding = 1) buffer  CulledBlades {
     Blade culledBlades[];
};

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
layout(set = 2, binding = 2) buffer NumBlades {
	  uint vertexCount;   // Write the number of blades remaining here
	  uint instanceCount; // = 1
	  uint firstVertex;   // = 0
	  uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

	Blade blade = blades[gl_GlobalInvocationID.x];
	vec3 v0 = blade.v0.xyz;
	vec3 v1 = blade.v1.xyz;
	vec3 v2 = blade.v2.xyz;
	vec3 up = blade.up.xyz;
	float orientation = blade.v0.w;
	float height = blade.v1.w;
	float width = blade.v2.w;
	float stiffness = blade.up.w;
	vec3 right = normalize(vec3(cos(orientation), 0, sin(orientation)));
	vec3 front = normalize(cross(up, right));

    // TODO: Apply forces on every blade and update the vertices in the buffer
	// gravity
	vec3 gE = vec3(0.0, -9.8, 0.0);
	vec3 gF = 0.25 * length(gE) * front;
	vec3 g = gE + gF;

	// recovery
	vec3 initV2 = v0 + height * up;
	vec3 recovery = (initV2 - v2) * stiffness;

	// wind
	vec3 wind = sin(totalTime) * vec3(1.0, 0.0, 1.0) * 2.0;
	float fd = 1.0 - abs(dot(normalize(wind), normalize(v2 - v0)));
	float fr = dot((v2 - v0), up) / height;
	float alignmentValue = fd * fr;
	vec3 w = wind * alignmentValue;

	// update v2
	v2 = v2 + (g + recovery + w) * deltaTime;
	// check v2 and ground
	v2 = v2 - up * min(up * (v2 - v0), 0);
	// update v1
	float lproj = length(v2 - v0 - up*((v2 - v0)*up));
	v1 = v0 + height * up * max(1 - lproj / height, 0.05 * max(lproj / height, 1));
	// validation
	float L0 = length(v2 - v0);
	float L1 = length(v2 - v1) + length(v1 - v0);
	float n = 2.0;
	float L = (2 * L0 + (n - 1) * L1) / (n + 1);
	float r = height / L;
	vec3 v1corr = v0 + r * (v1 - v0);
	vec3 v2corr = v1corr + r * (v2 - v1);

	// write new v1, v2 to the bladesBuffer
	blade.v1.xyz = v1corr;
	blade.v2.xyz = v2corr;
	blades[gl_GlobalInvocationID.x] = blade;


	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

	// orientation culling
	vec3 cameraForward = normalize(vec3(camera.view[0][2], camera.view[1][2], camera.view[2][2]));
	float oriCondition = abs(dot(front, cameraForward));
	if(oriCondition < 0.6){
		return;
	}

	// view-frustum culling
	mat4 VP = camera.proj * camera.view;
    vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
	vec4 v0NDC = VP * vec4(v0, 1.0);
	vec4 v2NDC = VP * vec4(v2, 1.0);
	vec4 mNDC = VP * vec4(m, 1.0);
	float tolerance = 0.5;
	bool v0IsInBounds = inBounds(v0NDC.x, v0NDC.w + tolerance);
	bool v2IsInBounds = inBounds(v2NDC.x, v2NDC.w + tolerance);
	bool mIsInBounds = inBounds(mNDC.x,mNDC.w + tolerance);
	if(!v0IsInBounds || !v2IsInBounds || !mIsInBounds){
		return;
	}

	// distance culling
	float dMax = 30.0;
	int distanceN = 10;
	//vec3 cameraPos = vec3(camera.view[3][0], camera.view[3][1], camera.view[3][2]) * -1.0;
	vec3 cameraPos = vec3(inverse(camera.view)* vec4(0.f, 0.f, 0.f, 1.f)) * -1.0;
	float dproj = length(v0 - cameraPos - up * (dot(v0 - cameraPos, up)));
	if((gl_GlobalInvocationID.x % distanceN) < (distanceN * (1.0 - dproj / dMax))){
		return;
	}
	

	culledBlades[atomicAdd(numBlades.vertexCount, 1)] = blade;
}
