#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define SQRT_OF_ONE_THIRD 0.5773502691896257645091487805019574556476f

#define ORIENTATION_CULLING
#define VIEW_FRUSTUM_CULLING
#define DISTANCE_CULLING

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;
layout(set = 2, binding = 0) buffer InputBlades {
    Blade inputBlades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
    uint vertexCount;   // Write the number of blades remaining here
    uint instanceCount; // = 1
    uint firstVertex;   // = 0
    uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

vec3 localToGlobal(vec3 p, vec3 n){
    vec3 directionNotNormal;
    if (abs(n.x) < SQRT_OF_ONE_THIRD) {
        directionNotNormal = vec3(1, 0, 0);
    }
    else if (abs(n.y) < SQRT_OF_ONE_THIRD) {
        directionNotNormal = vec3(0, 1, 0);
    }
    else {
        directionNotNormal = vec3(0, 0, 1);
    }

    // Use not-normal direction to generate two perpendicular directions
    vec3 perpendicularDirection1 = normalize(cross(n, directionNotNormal));
    vec3 perpendicularDirection2 = normalize(cross(n, perpendicularDirection1));
    return p.x * perpendicularDirection1 + p.y * perpendicularDirection2 + p.z * n;
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
	    numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
    vec3 v0 = vec3(inputBlades[gl_GlobalInvocationID.x].v0);
    vec3 v1 = vec3(inputBlades[gl_GlobalInvocationID.x].v1);
    vec3 v2 = vec3(inputBlades[gl_GlobalInvocationID.x].v2);
    vec3 up = vec3(inputBlades[gl_GlobalInvocationID.x].up);
    float angle = inputBlades[gl_GlobalInvocationID.x].v0.w;
    float height = inputBlades[gl_GlobalInvocationID.x].v1.w;
    float width = inputBlades[gl_GlobalInvocationID.x].v2.w;
    float stiffness = inputBlades[gl_GlobalInvocationID.x].up.w;
    vec3 right = localToGlobal(vec3(cos(angle), sin(angle), 0), up);
    vec3 front = cross(up, right);

    // calculate forces
    vec3 gravity = vec3(0.f);
    vec3 recovery = vec3(0.f);
    vec3 wind = vec3(0.f);

    // gravity
    vec3 gE = vec3(0, -1, 0) * 9.8f;
    vec3 gF = 0.25f * length(gE) * front;
    gravity = gE + gF;

    // recovery
    vec3 i_v2 = v0 + up * height;
    recovery = (i_v2 - v2) * stiffness;

    // wind
    float maxWindStrength = 2.f;
    float windSpeed = 2.f;
    vec4 windDirection = vec4(-0.5f, 0.5f, 0, maxWindStrength * cos(windSpeed * totalTime + 0.25 * v0));
    float windAlignment = abs(dot(windDirection.xyz, front));
    wind = normalize(windDirection.xyz) * windAlignment * windDirection.w;

    vec3 tv2 = (gravity + recovery + wind) * deltaTime;

    // correct v1 and v2
    v2 += tv2;
    v2 -= up * min(dot(up, v2 - v0), 0);
    float lProj = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + height * up * max(1 - lProj / height, 0.05 * max(lProj/height, 1));

    // correct length of curve
    float L0 = length(v2 - v0);
    float L1 = length(v2 - v1) + length(v1 - v0);
    float L = (2 * L0 + L1) / 3;
    float r = height / L;
    vec3 v1c = v0 + r * (v1 - v0);
    vec3 v2c = v1c + r * (v2 - v1);
    v1 = v1c; v2 = v2c;

    // update vectors
    inputBlades[gl_GlobalInvocationID.x].v1 = vec4(v1, height);
    inputBlades[gl_GlobalInvocationID.x].v2 = vec4(v2, width);

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    bool culled = false;
    vec3 eye = vec3(inverse(camera.view) * vec4(0.f, 0.f, 0.f, 1.f));

    // orientation test
#ifdef ORIENTATION_CULLING
    vec3 viewDir = eye - v0;
    if (abs(dot(normalize(viewDir), normalize(right))) > 0.9){
        culled = true;
    }
#endif

    // view-frustum test
#ifdef VIEW_FRUSTUM_CULLING
    mat4 projView = camera.proj * camera.view;
    vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
    vec4 ndcV0 = projView * vec4(v0, 1.f); ndcV0 /= ndcV0.w;
    vec4 ndcM = projView * vec4(m, 1.f); ndcM /= ndcM.w;
    vec4 ndcV2 = projView * vec4(v2, 1.f); ndcV2 /= ndcV2.w;
    
    float tolerance = 1.05f;
    bool testV0 = inBounds(ndcV0.x, tolerance) && inBounds(ndcV0.y, tolerance);
    bool testM = inBounds(ndcM.x, tolerance) && inBounds(ndcM.y, tolerance); 
    bool testV2 = inBounds(ndcV2.x, tolerance) && inBounds(ndcV2.y, tolerance);

    if (!testV0 && !testM && !testV2) {
        culled = true;
    }
#endif

    // distance Test 
#ifdef DISTANCE_CULLING
    float dProj = length(v0 - eye - up * dot((v0 - eye), up));
    float dMax = 80;
    uint id = gl_GlobalInvocationID.x;
    uint n = 10;
    if (mod(id, n) >= (n * (1 - dProj / dMax))) {
        culled = true;
    }
#endif

    if (!culled)
    {
        culledBlades[atomicAdd(numBlades.vertexCount, 1)] = inputBlades[gl_GlobalInvocationID.x];
    }
}
